@model Daftari.ViewModel.StatusReportVM

@section CustomStyles {
    @Styles.Render("~/Content/datatables")

    <style type="text/css">

        #reportrange {
            width: 300px;
        }

        td h2 {
            font-size: 14px;
        }

        .NotOpen {
            background: rgb(255, 216, 216) !IMPORTANT;
        }

            .NotOpen.selected {
                background: rgb(255, 181, 181) !IMPORTANT;
            }

        .btn-info {
            padding: 0.0rem 0.4rem !important;
            margin-right: 0.5rem;
        }

        .img-circle {
            width: 33px;
            height: 33px;
            margin: 2px;
            border-radius: 50%;
        }

        .g-label {
            height: 15px;
            padding-top: 6px;
            cursor: pointer;
        }
        #progress {
            float: right;
        }
    </style>
}
@{
    ViewBag.Title = "Status Report";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Status Report</h5><label id="progress"></label>

                <div class="mb-3">
                    @Html.LabelFor(model => model.StatusFilter, htmlAttributes: new { @class = "control-label" })<br />
                    @Html.EnumDropDownListFor(model => model.StatusFilter, "Select...", htmlAttributes: new { @class = "form-control" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.DateFilter, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.DateFilter, new { htmlAttributes = new { @class = "form-control date", data_toggle = "date-picker", data_time_Picker = "true" } })
                </div>

                <table id="dtTable" class="table">
                    <thead>
                        <tr>
                            <th>
                                Person
                            </th>
                            <th>
                                Name
                            </th>
                            <th>
                                Status
                            </th>
                        </tr>
                    </thead>
                </table>
            </div> <!-- end card-body-->
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/datatables")
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script type="text/javascript" src="//cdn.datatables.net/plug-ins/1.10.15/sorting/datetime-moment.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.33/moment-timezone-with-data.js" integrity="sha512-nwFvp27oDSOkJAXZdkqJDB2FkkI3dXJKSapfBmm+R9YW/4KvT8SAGhyTxmt6Uxfa49rTYODHdjjVjOLSJELfJQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="text/javascript" src="~/Scripts/jquery.signalR-2.4.2.min.js"></script>
    <script src="@Url.Content("~/signalr/hubs")"></script>

    <script type="text/javascript">
        var rootURL = '@Url.Action("/")';

        $(function () {

            var progressNotifier = $.connection.pike13Hub;

            progressNotifier.client.updateProgress = function (operation, progress) {
                $("#progress").html(operation + " " + progress);
                console.log(operation + " " + progress);
                console.log(" might have not sent prop ");
            };

            $.connection.hub.start().done(function () {
                console.log("Hub is started.");
            });
        });

        $.fn.dataTable.moment('h:mm:ss a');

        var table = $('#dtTable').DataTable({
        scrollY: 550,
        scrollX: true,
        deferRender: false,
        scroller: {
            loadingIndicator: true,
            displayBuffer: 150
        },
        select: true,
       "ajax": {
          "url": rootURL + 'GetStatusJSON',
            "data": function (d) {
                var dates = $('#DateFilter').val().split(' - ');
                d.from = moment(dates[0]).format('YYYY-MM-DDTHH:mm:ss');
                d.to = moment(dates[1]).format('YYYY-MM-DDTHH:mm:ss');
                if (typeof (personId) !== 'undefined') {
                    d.staff_member_ids = personId;
                }
                d.status = $("#StatusFilter option:selected").text()
            },
            dataSrc: 'visits'
        },
        lengthChange: false,
        //"processing": true,
        stateSave: true,
        "columns": [
            //{
            //    "data": "start_at", render: function (data, type, row) {
            //        return convertUTCToLocal(data, "YYYY-MM-DD hh:mm:ss A").format('YYYY-MM-DD');
            //        //return moment(data).format('YYYY-MM-DD');
            //    },
            //    orderData: [0, 1]
            //},
            //{
            //    "data": "start_at", render: function (data, type, row) {
            //        return convertUTCToLocal(data, "YYYY-MM-DD hh:mm:ss A").format('h:mm:ss a');
            //        //return moment(data).format('h:mm:ss a');
            //    },
            //    orderData: [1, 0]
            //},
            //{ "data": "person" },
            {
                "data": null, render: function (data, type, row, meta) {
                    var msg = '<img class="img-circle"  src="' + row.photoMD + '" />' + (row.person) + '<br />';

                    return msg;
                }
            },
            { "data": "name" },
            //{ "data": "status" },
            {
                "data": "start_at", render: function (data, type, row) {
                    return '<div style="color:' + (row.unpaid ? 'orange' : 'inherit') + ';">' + row.status + '</div>'
                    //return convertUTCToLocal(data, "YYYY-MM-DD hh:mm:ss A").format('YYYY-MM-DD');
                    //return moment(data).format('YYYY-MM-DD');
                }
            },
        ],
        rowCallback: function (row, data) {
            //if (data.isNotOpen) {
            //    $(row).addClass('NotOpen');
            //}
        },
        columnDefs: [

        ],
        order: [0, "asc"],
        "initComplete": function (settings, json) {
            //makeRequest();

            userPermExec(json);
        }
    });

    new $.fn.dataTable.Buttons(table, {
        buttons: true,
        "buttons": [
            {
                extend: 'colvis',
                postfixButtons: ['colvisRestore'],
            },
            'selectAll',
            'selectNone',
            {
                extend: 'print',
                exportOptions: {
                    columns: ':visible',
                    stripNewlines: false,
                    stripHtml: false
                },
                footer: true
            },
            {
                text: 'Reset Filter',
                action: function (e, dt, node, config) {
                    table.state.clear();
                    window.location.reload();
                }
            },
            {
                text: 'Reload',
                action: function (e, dt, node, config) {
                    dt.ajax.reload(function () {
                        //makeRequest();
                        userPermExec(table.ajax.json());
                    });
                }
            }
            //,
            //{
            //    text: 'Sync Unpaid',
            //    action: function (e, dt, node, config) {

            //        if ($("#StatusFilter option:selected").text() != "unpaid") {

            //            $.NotificationApp.send("Status", "Please select unpaid status first", "top-right", "rgba(0,0,0,0.2)", "info");
            //            return;
            //        }

            //        $.NotificationApp.send("Status", "Requesting Server Sync", "bottom-right", "rgba(0,0,0,0.2)", "info");

            //        var dates = $('#DateFilter').val().split(' - ');
            //        var from = moment(dates[0]).format('YYYY-MM-DDTHH:mm:ss');
            //        var to = moment(dates[1]).format('YYYY-MM-DDTHH:mm:ss');

            //        $.ajax({
            //            async: true,
            //            url: rootURL + "SyncUnpaid?from=" + from + "&to=" + to + "&business_id=null",
            //            cache: false
            //        }).done(function (data) {

            //            $.NotificationApp.send("Status", data.msg, "bottom-right", "rgba(0,0,0,0.2)", (data.type === 0) ? "success" : (data.type === 1) ? "info" : "danger");

            //            table.ajax.reload();
            //        }).fail(function (msg) {
            //            $.NotificationApp.send("Status", 'Fail', "bottom-right", "rgba(0,0,0,0.2)", "danger");

            //            table.ajax.reload();
            //        });
            //    },
            //    className: 'btn-danger'
            //}
        ],
    });

    // Attach Buttons
    table.buttons().container()
        .appendTo('#dtTable_wrapper .col-md-6:eq(0)');
    </script>

    @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
    {
        <script>
            table.button().add(6, {
                text: 'Sync Unpaid',
                action: function (e, dt, node, config) {

                    if ($("#StatusFilter option:selected").text() != "unpaid") {

                        $.NotificationApp.send("Status", "Please select unpaid status first", "top-right", "rgba(0,0,0,0.2)", "info");
                        return;
                    }

                    $.NotificationApp.send("Status", "Requesting Server Sync", "bottom-right", "rgba(0,0,0,0.2)", "info");

                    var dates = $('#DateFilter').val().split(' - ');
                    var from = moment(dates[0]).format('YYYY-MM-DDTHH:mm:ss');
                    var to = moment(dates[1]).format('YYYY-MM-DDTHH:mm:ss');

                    $.ajax({
                        async: true,
                        url: rootURL + "SyncUnpaid?from=" + from + "&to=" + to + "&business_id=null",
                        cache: false
                    }).done(function (data) {

                        $.NotificationApp.send("Status", data.msg, "bottom-right", "rgba(0,0,0,0.2)", (data.type === 0) ? "success" : (data.type === 1) ? "info" : "danger");

                        table.ajax.reload();
                    }).fail(function (msg) {
                        $.NotificationApp.send("Status", 'Fail', "bottom-right", "rgba(0,0,0,0.2)", "danger");

                        table.ajax.reload();
                    });
                },
                className: 'btn-danger'
            });
        </script>
    }

    <script type="text/javascript">
        $('#DateFilter').change(function () {
            table.ajax.reload(function () {
                //makeRequest();
                //userPermExec(table.ajax.json());
            });
        });

        $('#StatusFilter').change(function () {
            console.log("me");
            table.ajax.reload(function () {
                //makeRequest();
                //userPermExec(table.ajax.json());
            });
        });

        function userPermExec(json) {

        }
    </script>

    <script type="text/javascript">

        // convert utc time to local time
        function convertUTCToLocal(utcDt, utcDtFormat) {
            var toDt = moment.utc(utcDt, utcDtFormat).toDate();
            return moment(toDt);
        }
    </script>
}