@model Daftari.ViewModel.RosterScheduleVM

@section CustomStyles {
    @Styles.Render("~/Content/datatables")
    <style type="text/css">

        /*  tr.odd {
            background-color: lavender;
        }*/

        td h2 {
            font-size: 14px;
        }
    </style>
}
@{
    ViewBag.Title = "Cards";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Aqua Cards</h5>

                @if (ViewBag.CanView == true)
                {
                    <div class="mb-3">
                        @Html.LabelFor(model => model.StaffFilter, htmlAttributes: new { @class = "control-label" })
                        <select id="StaffFilter" class="form-control"></select>
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(model => model.DateFilter, htmlAttributes: new { @class = "form-label" })
                        @Html.EditorFor(model => model.DateFilter, new { htmlAttributes = new { @class = "form-control date", data_toggle = "date-picker", data_time_Picker = "true" } })
                    </div>
                }
                else
                {
                    @Html.EditorFor(model => model.DateFilter, new { htmlAttributes = new { @class = "form-control date", style= "display:none",data_toggle = "date-picker", data_time_Picker = "true" } })
                }

                <table id="dtTable" class="table">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.e.start_at) Date
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.e.start_at) Time
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.e.name)
                            </th>
                            <th>
                                Cards
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.e.staff_members)
                            </th>
                        </tr>
                    </thead>
                </table>
            </div> <!-- end card-body-->
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/datatables")
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script type="text/javascript" src="//cdn.datatables.net/plug-ins/1.10.15/sorting/datetime-moment.js"></script>

    @if (ViewBag.CanView == false)
    {
        <script type="text/javascript">
            var personId = '@ViewBag.PersonID';
        </script>
    }
<script type="text/javascript">
      var rootURL = '@Url.Action("/")';

        function getDataUrl(datestr) {
            var dates = datestr.split(' - ');
            var fromdate = moment(dates[0]).format('YYYY-MM-DDTHH:mm:ss');
            var todate = moment(dates[1]).format('YYYY-MM-DDTHH:mm:ss');
            var pid = '';
            if (typeof (personId) !== 'undefined') {
                pid = '&staff_member_ids=' + personId;
            }
            return 'https://@(ViewBag.Subdomain).pike13.com/api/v2/desk/event_occurrences?access_token=@(ViewBag.AccessCode)&from=' + fromdate + '&to=' + todate + pid;
        }

        function getLevelParam(lvl) {
            var levels = ['1 - Tadpoles',
                '2 - Minnows',
                '3 - Younger Leapfrog',
                '4 - Seahorses',
                '5 - Starfish',
                '6 - Seals',
                '7 - Sharks',
                '8 - Stingrays'];

            var lvlIndex = levels.indexOf(lvl);
            var lvlParam = '';
            if (lvlIndex !== -1)
                lvlParam = '&lvl=' + lvlIndex;

            if (lvl === '3 - Older Leapfrog')
                lvlParam = '&lvl=2';

            return lvlParam;
        }

    var tableConfig = {
        scrollY: 550,
        scrollX: true,
        deferRender: false,
        scroller: {
            loadingIndicator: true,
            displayBuffer: 150
        },
        select: true,
        stateSave: true,
        "ajax": { url: getDataUrl($('#DateFilter').val()), dataSrc: 'event_occurrences' },
        lengthChange: false,
        "processing": true,
        "columns": [
            {
                "data": "start_at", render: function (data, type, row) {
                    return moment(data).format('YYYY-MM-DD');
                },
                orderData: [0, 1]
            },
            {
                "data": "start_at", render: function (data, type, row) {
                    return moment(data).format('h:mm:ss a');
                },
                orderData: [1, 0]
            },
            { "data": "name" },
            {
                "data": null, render: function (data, type, row) {

                    var instructors = encodeURIComponent(row.staff_members.map(e => e.name).join(", "));
                    var plan = encodeURIComponent(moment(row.start_at).format('dddd, h:mmA'));
                    var stDate = encodeURIComponent(moment(row.start_at).format('YYYY-MM-DD'));

                    var html = '';

                    var cntr = 0;
                    for (var i in row.people) {
                        cntr++
                        var person = row.people[i];
                        var card = '<a class="btn btn-primary btn-raised btn-xs" OnClick="openCard(this,' + person.id + ',\'' + instructors + '\',\'' + data.name + '\',' + row.id + ',\'' + plan + '\',\'' + stDate + '\')">Open Card</a>';

                        html = html + cntr + '. ' + card + ' ' + person.name + '<br />';

                    }
                    return html;
                }
            },
            { "data": "staff_members", "render": "[, ].name" },
        ],
        order: [0, 'asc'],
        "initComplete": function (settings, json) {
            makeRequest();

            userPermExec(json);
        }
    };

    var tbButtonsConfig = {
        buttons: true,
        "buttons": [
            {
                extend: 'colvis',
                postfixButtons: ['colvisRestore'],
            },
            'selectAll',
            'selectNone',
            {
                extend: 'print',
                exportOptions: {
                    columns: ':visible',
                    stripNewlines: false,
                    stripHtml: false
                },
                footer: true
            },
            {
                text: 'Reset Filter',
                action: function (e, dt, node, config) {
                    table.state.clear();
                    window.location.reload();
                }
            },
        ],
    };
</script>

    @if (!(User.IsInRole("Admin") || User.IsInRole("Manager")))
    {
        <script type="text/javascript">
            tableConfig.select = false;
            tbButtonsConfig = {
                buttons: true,
                "buttons": [
                    {
                        extend: 'colvis',
                        postfixButtons: ['colvisRestore'],
                    },
                    {
                        text: 'Reset Filter',
                        action: function (e, dt, node, config) {
                            table.state.clear();
                            window.location.reload();
                        }
                    },
                ],
            };
        </script>
    }

    <script type="text/javascript">      

        $.fn.dataTable.moment('h:mm:ss a');
        var table = $('#dtTable').DataTable(tableConfig);

        new $.fn.dataTable.Buttons(table, tbButtonsConfig);

            // Attach Buttons
            table.buttons().container()
                .appendTo('#dtTable_wrapper .col-md-6:eq(0)');
    </script>

    @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
    {
        <form id="sendMail" style="display: none;" action="@Url.Action("SendMailsToCustomer", "Communication")" method="post">
            <input name="extIDs" id="mailExtIDs" />
        </form>
        <script>
            table.button().add(5, {
                action: function (e, dt, node, config) {
                    var data = table.rows({ selected: true }).data();
                    var dataLength = data.length;
                    var ids = [];
                    console.log(data);
                    for (var i = 0; i < dataLength; i++) {
                        var people = data[i].people;
                        for (var j in people) {
                            ids.push(people[j].id);
                        }
                    }

                    $('#mailExtIDs').val(ids.join(','));
                    document.getElementById('sendMail').submit();
                },
                text: 'Send Email',
                className: 'btn-secondary'
            });
        </script>

        if (ViewBag.Subdomain == "atss-muscat")
        {
            <form id="sendSMS" style="display: none;" action="@Url.Action("SendSMSToCustomer", "Communication")" method="post">
                <input name="extIDs" id="smsExtIDs" />
            </form>
            <script>
                table.button().add(6, {
                    action: function (e, dt, node, config) {
                        var data = table.rows({ selected: true }).data();
                        var dataLength = data.length;
                        var ids = [];
                        console.log(data);
                        for (var i = 0; i < dataLength; i++) {
                            var people = data[i].people;
                            for (var j in people) {
                                ids.push(people[j].id);
                            }
                        }

                        $('#smsExtIDs').val(ids.join(','));
                        document.getElementById('sendSMS').submit();
                    },
                    text: 'Send SMS',
                    className: 'btn-secondary'
                });
            </script>
        }
    }

    @if (ViewBag.CanView == true)
    {
        <script type="text/javascript">
            $('#DateFilter').change(function () {
                table.ajax.url(getDataUrl($('#DateFilter').val())).load()
            });
         
            function userPermExec(json) {
                var instructorArr = [];
                    instructorArr.push('All');
                for (var i in json.event_occurrences) {
                    var row = json.event_occurrences[i];
                    for (var j in row.staff_members) {
                        var member = row.staff_members[j];
                        if (instructorArr.indexOf(member.name) === -1)
                            instructorArr.push(member.name);
                    }
                }

                $.each(instructorArr, function (key, value) {
                    $('#StaffFilter')
                        .append($("<option></option>")
                            .attr("value", value)
                            .text(value));
                });

                $("#StaffFilter").change(function () {
                    var txt = $("#StaffFilter option:selected").text();
                    if (txt === 'All') {
                        table
                            .columns(4)
                            .search('')
                            .draw();
                    }
                    else {
                        table
                            .columns(4)
                            .search(txt)
                            .draw();
                    }

                });
            }
        </script>
    }
    else
    {
        <script>
        function userPermExec() {
             @*table
                    .columns(2)
                    .search('@ViewBag.UserFullName')
                    .draw();*@
        }
        </script>
    }

    <script type="text/javascript">

        var reqArr = [];

        var cacheArr = [];

        var proccessingArr = [];

        function makeRequest() {

            if (reqArr.length === 0)
                return;

            if (reqArr.length === 1) {
                table.ajax.reload();
                table.columns.adjust().draw();
            }
            var obj = reqArr.shift();
            var tp = obj.type;
            proccessingArr.push({ id: obj.id, type: tp });
            var val = cacheArr.find(d => d.id === obj.id && d.type === tp);

            if (typeof (val) !== 'undefined') {

                table.cell({ row: val.row, column: val.col }).data(table.cell({ row: val.row, column: val.col }).data());
                return makeRequest();
            }

            $.ajax({
                url: obj.url,
            })
                .done(function (data) {
                    var msg = '';

                    if (tp === 1) {

                        msg = data.visits[0].status;

                        cacheArr.push({ url: obj.url, data: msg, id: obj.id, row: obj.row, col: obj.col, type: 1 });
                    }

                    return makeRequest();
                });
        }

            function openCard(cntrl, pid, instructors, lvl, eid, plan, stDate) {
                var lvlParam = getLevelParam(lvl);
                var cardURL = '@Url.Action("Open", "StudentCards")' + '?sid=' + pid + '&instructors=' + instructors + lvlParam + '&eid=' + eid + '&plan=' + plan + '&startdate=' + stDate;

                var getVistUrl = 'https://@(ViewBag.Subdomain).pike13.com/api/v2/desk/people/' + pid + '/visits?event_occurrence_id=' + eid + '&access_token=@(ViewBag.AccessCode)';
                //console.log(lvl, lvlParam, cardURL, getVistUrl);
                //return;
                $(cntrl).addClass('disabled');
                $.NotificationApp.send("Status", "Checking Attendance...", "bottom-right", "rgba(0,0,0,0.2)", "secondary");
                $.ajax({
                    method: "GET",
                    url: getVistUrl,
                }).done(function (data) {
                    var state = data.visits[0].state;
                    console.log('Status: ' + state);
                    if (state !== 'late_canceled' && state !== 'noshowed') {
                        $.NotificationApp.send("Status", "Attendance Ok.", "bottom-right", "rgba(0,0,0,0.2)", "success");

                        $.NotificationApp.send("Status", "Searching Card...", "bottom-right", "rgba(0,0,0,0.2)", "secondary");

                        var checkLocalCardUrl = '@Url.Action("GetCardValidity", "StudentCards")?sid=' + pid + lvlParam;
                        //console.log(checkLocalCardUrl);
                        //return;
                        $.ajax({
                            method: "GET",
                            url: checkLocalCardUrl
                        })
                            .done(function (msg) {
                                if (msg.Status === 0) {
                                    $.NotificationApp.send("Status", "Opening Card...", "bottom-right", "rgba(0,0,0,0.2)", "secondary");
                                    window.location.href = cardURL;
                                } else if (msg.Status === 1) {
                                    $.NotificationApp.send("Status", "No Existing Card Found. Creating New Now..", "bottom-right", "rgba(0,0,0,0.2)", "info");
                                    window.location.href = cardURL;
                                } else {
                                    $.NotificationApp.send("Status", msg.StatusMsg, "bottom-right", "rgba(0,0,0,0.2)", "warning");
                                    $(cntrl).removeClass('disabled');
                                }

                            }).fail(function (jqXHR, textStatus, errorThrown) {

                                if (typeof (jqXHR.responseText) === 'undefined') {
                                    var errorMsg = jqXHR.statusText;
                                    $.NotificationApp.send("Status", errorMsg, "bottom-right", "rgba(0,0,0,0.2)", "danger");
                                    $(cntrl).removeClass('disabled');
                                }
                                else {
                                    var errorMsg = JSON.parse(jqXHR.responseText);
                                    $.NotificationApp.send("Status", errorMsg.errors.state_event, "bottom-right", "rgba(0,0,0,0.2)", "danger");
                                    $(cntrl).removeClass('disabled');
                                }
                            });
                    }
                    else {

                        $.NotificationApp.send("Status", "Attendance Status: " + state, "bottom-right", "rgba(0,0,0,0.2)", "warning");
                        $(cntrl).removeClass('disabled');
                    }

                });
            }
    </script>
}