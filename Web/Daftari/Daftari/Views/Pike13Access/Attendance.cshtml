@model Daftari.ViewModel.RosterScheduleVM

@section CustomStyles {
    @Styles.Render("~/Content/datatables")

    <style type="text/css">


        #reportrange {
            width: 300px;
        }

        td h2 {
            font-size: 14px;
        }
    </style>
}
@{
    ViewBag.Title = "Attendance";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Attendance</h5>

                @if (ViewBag.CanView == true)
                {
                    <div class="mb-3">
                        @Html.LabelFor(model => model.StaffFilter, htmlAttributes: new { @class = "control-label" })
                        <select id="StaffFilter" class="form-control"></select>
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(model => model.DateFilter, htmlAttributes: new { @class = "form-label" })
                        @Html.EditorFor(model => model.DateFilter, new { htmlAttributes = new { @class = "form-control date", data_toggle = "date-picker", data_time_Picker = "true" } })
                    </div>
                }
                else
                {
                    @Html.EditorFor(model => model.DateFilter, new { htmlAttributes = new { @class = "form-control date", style = "display:none", data_toggle = "date-picker", data_time_Picker = "true" } })
                }



                <table id="dtTable" class="table">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.e.start_at) Date
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.e.start_at) Time
                            </th>
                            <th>
                                Attendance
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.e.name)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.e.staff_members)
                            </th>
                        </tr>
                    </thead>
                </table>


            </div> <!-- end card-body-->
        </div>
    </div>

</div>

@section Scripts {

    @Scripts.Render("~/bundles/datatables")
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script type="text/javascript" src="//cdn.datatables.net/plug-ins/1.10.15/sorting/datetime-moment.js"></script>


    @if (ViewBag.CanView == false)
    {
        <script type="text/javascript">
            var personId = '@ViewBag.PersonID';
        </script>
    }

    <script type="text/javascript">
    var rootURL = '@Url.Action("/")';
        var cardURL = '@Url.Action("Open", "StudentCards")';

        function getDataUrl(datestr) {
            var dates = datestr.split(' - ');
            var fromdate = moment(dates[0]).format('YYYY-MM-DDTHH:mm:ss');
            var todate = moment(dates[1]).format('YYYY-MM-DDTHH:mm:ss');
            var pid = '';
            if (typeof (personId) !== 'undefined') {
                pid = '&staff_member_ids=' + personId;
            }
            return 'https://@(ViewBag.Subdomain).pike13.com/api/v2/desk/event_occurrences?access_token=@(ViewBag.AccessCode)&from=' + fromdate + '&to=' + todate + pid;
        }

        var levels = ['1 - Tadpoles',
            '2 - Minnows',
            '3 - Younger Leapfrog',
            '4 - Seahorses',
            '5 - Starfish',
            '6 - Seals',
            '7 - Sharks',
            '8 - Stingrays'];

            var tableConfig = {
                scrollY: 550,
                scrollX: true,
                deferRender: false,
                scroller: {
                    loadingIndicator: true,
                    displayBuffer: 150
                },
                "ajax": { url: getDataUrl($('#DateFilter').val()), dataSrc: 'event_occurrences' },
                lengthChange: false,
                stateSave: true,
                "processing": true,
                "columns": [
                    {
                        "data": "start_at", render: function (data, type, row) {
                            return moment(data).format('YYYY-MM-DD');
                        },
                        orderData: [0, 1]
                    },
                    {
                        "data": "start_at", render: function (data, type, row) {
                            return moment(data).format('h:mm:ss a');
                        },
                        orderData: [1, 0]
                    },
                    {
                        "data": null, render: function (data, type, row) {

                            var instructors = encodeURIComponent(row.staff_members.map(e => e.name).join(", "));
                            var plan = encodeURIComponent(moment(row.start_at).format('dddd, h:mmA'));
                            var stDate = encodeURIComponent(moment(row.start_at).format('YYYY-MM-DD'));

                            var html = '';

                            if (!row.attendance_complete) {
                                var lvlIndex = levels.indexOf(data.name);
                                var lvl = '';
                                if (lvlIndex !== -1)
                                    lvl = '&lvl=' + lvlIndex;

                                if (data.name === '3 - Older Leapfrog')
                                    lvl = '&lvl=2';
                                var cntr = 0;
                                for (var i in row.people) {
                                    cntr++
                                    var person = row.people[i];
                                    var templateBttn = '<a class="btn btn-{0} btn-xs" OnClick="putVisitToPike(this,\'{1}\',\'' + person.id + '\',\'' + row.id + '\')"><i class="mdi {2}"></i></a>';

                                    html = html + cntr + '. '
                                        + templateBttn.format('primary', 'complete', 'mdi-calendar-check')
                                        + templateBttn.format('warning', 'noshow', 'mdi-calendar-question')
                                        + templateBttn.format('info', 'late_cancel', 'mdi-calendar-remove')
                                        + templateBttn.format('danger', 'reset', 'mdi-undo-variant')
                                        + ' '
                                        + person.name
                                        + '<br />';
                                }
                            }

                            return html;
                        }
                    },
                    { "data": "name" },
                    { "data": "staff_members", "render": "[, ].name" }
                ],
                order: [0, 'asc'],
                "initComplete": function (settings, json) {
                    userPermExec(json);
                }
            };
    var tbButtonsConfig = {
        buttons: true,
        "buttons": [
            {
                extend: 'colvis',
                postfixButtons: ['colvisRestore'],
            },
            'selectAll',
            'selectNone',
            {
                extend: 'print',
                exportOptions: {
                    columns: ':visible',
                    stripNewlines: false,
                    stripHtml: false
                },
                footer: true
            },
            {
                text: 'Reset Filter',
                action: function (e, dt, node, config) {
                    table.state.clear();
                    window.location.reload();
                }
            },
        ],
    };
    </script>
    @if (!(User.IsInRole("Admin") || User.IsInRole("Manager")))
    {
        <script type="text/javascript">
            tableConfig.select = false;
            tbButtonsConfig = {
                buttons: true,
                "buttons": [
                    {
                        extend: 'colvis',
                        postfixButtons: ['colvisRestore'],
                    },
                    {
                        text: 'Reset Filter',
                        action: function (e, dt, node, config) {
                            table.state.clear();
                            window.location.reload();
                        }
                    },
                ],
            };
        </script>
    }
    <script type="text/javascript">

        $.fn.dataTable.moment('h:mm:ss a');
        var table = $('#dtTable').DataTable(tableConfig);

        table
            .columns(2)
            .search('^(?!\s*$).+', true, false, false)
            .draw();

        new $.fn.dataTable.Buttons(table, tbButtonsConfig);

        table.buttons().container()
            .appendTo('#dtTable_wrapper .col-md-6:eq(0)');
    </script>


    <script type="text/javascript">
            $('#DateFilter').change(function () {
                table.ajax.url(getDataUrl($('#DateFilter').val())).load()
            });
            
        function userPermExec(json) {
                var instructorArr = [];
                    instructorArr.push('All');
                for (var i in json.event_occurrences) {
                    var row = json.event_occurrences[i];
                    for (var j in row.staff_members) {
                        var member = row.staff_members[j];
                        if (instructorArr.indexOf(member.name) === -1)
                            instructorArr.push(member.name);
                    }
                }

                $.each(instructorArr, function (key, value) {
                    $('#StaffFilter')
                        .append($("<option></option>")
                            .attr("value", value)
                            .text(value));
                });

                $("#StaffFilter").change(function () {
                    var txt = $("#StaffFilter option:selected").text();
                    if (txt === 'All') {
                        table
                            .columns(4)
                            .search('')
                            .draw();
                    }
                    else {
                        table
                            .columns(4)
                            .search(txt)
                            .draw();
                    }

                });
            }
        function putVisitToPike(dom, attdStatus, pid, eid) {

            $(dom).addClass('disabled');

            var getVistUrl = 'https://@(ViewBag.Subdomain).pike13.com/api/v2/desk/people/' + pid + '/visits?event_occurrence_id=' + eid + '&access_token=@(ViewBag.AccessCode)';

            $.ajax({
                method: "GET",
                url: getVistUrl,
            }).done(function (data) {
                var vid = data.visits[0].id;
                var updateVisitUrl = 'https://@(ViewBag.Subdomain).pike13.com/api/v2/desk/visits/' + vid + '?access_token=@(ViewBag.AccessCode)';
                $.ajax({
                    method: "PUT",
                    url: updateVisitUrl,
                    data: { "visit": { "state_event": attdStatus } }
                })
                    .done(function (msg) {

                        $.NotificationApp.send("Status", "Updated", "bottom-right", "rgba(0,0,0,0.2)", "success");
                    }).fail(function (jqXHR, textStatus, errorThrown) {

                        if (typeof (jqXHR.responseText) === 'undefined') {
                            var errorMsg = jqXHR.statusText;
                            $.NotificationApp.send("Error", errorMsg, "bottom-right", "rgba(0,0,0,0.2)", "danger");
                        }
                        else {
                            var errorMsg = JSON.parse(jqXHR.responseText);

                            $.NotificationApp.send("Error", errorMsg.errors.state_event, "bottom-right", "rgba(0,0,0,0.2)", "danger");
                        }
                    })
            });

                }
                if (!String.prototype.format) {
                    String.prototype.format = function () {
                        var args = arguments;
                        return this.replace(/{(\d+)}/g, function (match, number) {
                            return typeof args[number] != 'undefined'
                                ? args[number]
                                : match
                                ;
                        });
                    };
                }

    </script>

}
